@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using CopilotConnectorGui.Services
@using CopilotConnectorGui.Models
@using System.Security.Claims
@attribute [Authorize]
@inject AppRegistrationService AppRegistrationService
@inject SchemaService SchemaService
@inject GraphService GraphService
@inject IJSRuntime JSRuntime

<PageTitle>Copilot Connector Setup</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Microsoft Graph Copilot Connector Setup</h1>
            
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <strong>Error:</strong> @_errorMessage
                </div>
                
                @* ClientSecretCredential Authentication Failed Alert *@
                @if (_errorMessage.Contains("ClientSecretCredential authentication failed"))
                {
                    <div class="alert alert-warning" role="alert">
                        <h5><i class="bi bi-exclamation-triangle"></i> Authentication Issue Detected</h5>
                        <p><strong>The newly created app registration needs admin consent or has a timing issue.</strong></p>
                        
                        @if (_appRegistrationResult != null)
                        {
                            <div class="d-flex gap-2 mt-3 mb-3">
                                <button class="btn btn-primary" @onclick="() => OpenAdminConsentUrl(_appRegistrationResult.ApplicationId, _appRegistrationResult.TenantId)">
                                    <i class="bi bi-shield-check"></i> Grant Admin Consent Now
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="RetrySchemaCreation">
                                    <i class="bi bi-arrow-clockwise"></i> Retry Connection Creation
                                </button>
                            </div>
                        }
                        
                        <div class="alert alert-info mt-2" role="alert">
                            <h6><i class="bi bi-lightbulb"></i> What to do:</h6>
                            <ol class="mb-0">
                                <li><strong>Grant Admin Consent:</strong> Click the "Grant Admin Consent Now" button above</li>
                                <li><strong>Wait:</strong> Allow 2-3 minutes for the permissions to propagate</li>
                                <li><strong>Retry:</strong> Click "Retry Connection Creation" to attempt the process again</li>
                            </ol>
                        </div>
                    </div>
                }
                
                @if (_errorMessage.Contains("TO FIX THIS:"))
                {
                    <div class="alert alert-warning" role="alert">
                        <h5><i class="bi bi-tools"></i> Quick Fix - Configure App Permissions</h5>
                        <p><strong>Follow these steps to configure the current app registration:</strong></p>
                        
                        <ol>
                            <li>Open Azure Portal: <a href="https://portal.azure.com" target="_blank" class="btn btn-sm btn-outline-primary">Open Azure Portal</a></li>
                            <li>Navigate to: <strong>Azure Active Directory</strong> → <strong>App registrations</strong></li>
                            <li>Find app with ID: <code>3e847995-c69c-4dc4-9246-21ad3fa3d76c</code></li>
                            <li>Click <strong>"API permissions"</strong> → <strong>"Add a permission"</strong></li>
                            <li>Select <strong>"Microsoft Graph"</strong> → <strong>"Delegated permissions"</strong></li>
                            <li>Search for and add:
                                <ul>
                                    <li><code>Application.ReadWrite.All</code></li>
                                    <li><code>Directory.ReadWrite.All</code></li>
                                    <li><code>ExternalConnection.ReadWrite.All</code></li>
                                    <li><code>ExternalItem.ReadWrite.All</code></li>
                                </ul>
                            </li>
                            <li>Click the <strong>"Grant admin consent"</strong> button</li>
                            <li>Refresh this page and try again</li>
                        </ol>
                        
                        <div class="mt-3">
                            <a href="https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/CallAnAPI/appId/3e847995-c69c-4dc4-9246-21ad3fa3d76c" 
                               target="_blank" 
                               class="btn btn-primary">
                                <i class="bi bi-box-arrow-up-right"></i> Configure Permissions in Azure Portal
                            </a>
                        </div>
                    </div>
                }

                @* Incremental Consent Alert - New functionality *@
                @if (_errorMessage.Contains("Insufficient permissions") || _errorMessage.Contains("MsalUiRequiredException"))
                {
                    <div class="alert alert-info" role="alert">
                        <h5><i class="bi bi-info-circle"></i> Incremental Consent Required</h5>
                        <p><strong>We've recently added External Connection permissions to this application.</strong></p>
                        <p>Since you're already signed in, you need to provide incremental consent for the new permissions:</p>
                        
                        <div class="d-flex gap-2 mt-3">
                            <a href="MicrosoftIdentity/Account/SignOut" class="btn btn-warning">
                                <i class="bi bi-box-arrow-right"></i> Sign Out & Sign In Again
                            </a>
                            <span class="text-muted align-self-center">This will trigger consent for the new External Connection permissions</span>
                        </div>
                    </div>
                }
                else if (_errorMessage.Contains("Insufficient privileges") || _errorMessage.Contains("Application Developer"))
                {
                    <div class="alert alert-info" role="alert">
                        <h5><i class="bi bi-info-circle"></i> Permission Requirements</h5>
                        <p><strong>To create app registrations, you need one of these Azure AD roles:</strong></p>
                        <ul>
                            <li><strong>Application Developer</strong> - Can create and manage applications</li>
                            <li><strong>Cloud Application Administrator</strong> - Full application management</li>
                            <li><strong>Global Administrator</strong> - All permissions</li>
                        </ul>
                        
                        <hr>
                        
                        <h6><i class="bi bi-gear"></i> Solutions:</h6>
                        <ol>
                            <li><strong>Contact your Azure AD Administrator</strong> to assign you one of the required roles</li>
                            <li><strong>Use Azure CLI Bootstrap</strong> if you have sufficient permissions via Azure CLI:
                                <ul>
                                    <li>Install Azure CLI if not already installed</li>
                                    <li>Run <code>az login</code> in a terminal</li>
                                    <li>Click the "🚀 Auto-Setup with Azure CLI" button above</li>
                                </ul>
                            </li>
                            <li><strong>Ask an administrator</strong> to create the app registration manually and provide you with the Application ID and Client Secret</li>
                        </ol>
                        
                        <div class="alert alert-warning mt-2" role="alert">
                            <small><strong>Note:</strong> These permissions are required because this application needs to create app registrations with Microsoft Graph API permissions for Copilot connectors.</small>
                        </div>
                    </div>
                }
            }

            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <div class="alert alert-success" role="alert">
                    <strong>Success:</strong> @_successMessage
                </div>
            }

            @* Show processing UI even if authentication is temporarily lost *@
            @if (_forceShowUI && _isProcessing)
            {
                <div class="card">
                    <div class="card-header">
                        <h3>Processing External Connection Setup</h3>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <strong>Please wait...</strong><br />
                            @if (!string.IsNullOrEmpty(_statusMessage))
                            {
                                <div class="mt-2">
                                    <i class="bi bi-arrow-right"></i> @_statusMessage
                                </div>
                            }
                            else
                            {
                                <div class="mt-2">
                                    <i class="bi bi-arrow-right"></i> Creating your External Connection...
                                </div>
                            }
                        </div>
                        
                        <div class="progress mb-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" 
                                 style="width: @GetProgressWidth()" 
                                 aria-valuenow="@GetProgressValue()" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                            </div>
                        </div>

                        <div class="text-center">
                            <i class="bi bi-gear-fill fa-spin" style="font-size: 3rem; color: #0078d4;"></i>
                            <p class="mt-2 text-muted">Setting up your connection... This may take several minutes.</p>
                            <small class="text-muted">Please keep this page open while processing completes.</small>
                        </div>
                    </div>
                </div>
            }
            else
            {

            <AuthorizeView>
                <NotAuthorized>
                    <div class="card">
                        <div class="card-header">
                            <h3>Authentication Required</h3>
                        </div>
                        <div class="card-body text-center">
                            <div class="mb-4">
                                <i class="bi bi-shield-lock" style="font-size: 3rem; color: #0078d4;"></i>
                            </div>
                            <h4>Sign in to Your Microsoft Entra ID Tenant</h4>
                            <p class="lead">Please sign in with your Microsoft account to continue.</p>
                            
                            <div class="alert alert-primary">
                                <h6><i class="bi bi-info-circle"></i> What This Application Does</h6>
                                <p class="mb-0">This application helps you create <strong>Microsoft Copilot Connectors</strong> for Microsoft Copilot. 
                                It automatically sets up the required Azure app registrations, configures permissions, and creates the connection schema 
                                so you can integrate your external data sources with Microsoft 365 search and Copilot experiences.</p>
                            </div>
                            
                            <div class="d-grid gap-2" style="max-width: 300px; margin: 0 auto;">
                                <a href="MicrosoftIdentity/Account/SignIn" class="btn btn-primary btn-lg">
                                    <i class="bi bi-microsoft"></i> Sign in with Microsoft
                                </a>
                            </div>

                            @* Hidden buttons - keeping functionality but hiding from UI *@
                            <div style="display: none;">
                                <button type="button" class="btn btn-success btn-lg" @onclick="PerformBootstrap" disabled="@_isProcessing">
                                    @if (_isBootstrapping)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <text>Setting up automatically...</text>
                                    }
                                    else
                                    {
                                        <i class="bi bi-magic"></i> <text>🚀 Auto-Setup with Azure CLI</text>
                                    }
                                </button>
                                <button type="button" class="btn btn-outline-primary btn-lg" @onclick="ManualAutoLogin" disabled="@_isProcessing">
                                    @if (_isProcessing && !_isBootstrapping)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <text>Trying Auto Sign-in...</text>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-clockwise"></i> <text>Try Auto Sign-in</text>
                                    }
                                </button>
                                <button type="button" class="btn btn-info btn-lg" @onclick="OpenWebTerminal">
                                    <i class="bi bi-terminal-fill"></i> Open Azure CLI Terminal
                                </button>
                                <button type="button" class="btn btn-outline-primary btn-lg" @onclick="CheckAzureCli">
                                    <i class="bi bi-terminal"></i> Use Azure CLI Authentication
                                </button>
                            </div>
                        </div>
                    </div>
                </NotAuthorized>
                <Authorized Context="authUser">
                    @if (_currentStep == SetupStep.Configuration)
                    {
                        <div class="card">
                            <div class="card-header">
                                <h3>Step 1: Configuration</h3>
                                @if (_useAzureCli)
                                {
                                    <small class="text-muted">Authenticated via Azure CLI</small>
                                }
                                else
                                {
                                    <small class="text-muted">Signed in as: @authUser.User.Identity?.Name</small>
                                }
                            </div>
                            <div class="card-body">
                                <EditForm Model="@_configuration" OnValidSubmit="@HandleConfigurationSubmit" Context="editContext">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="mb-3">
                                        <label for="tenantId" class="form-label">Tenant ID</label>
                                        <InputText id="tenantId" class="form-control" @bind-Value="_configuration.TenantId" placeholder="Auto-populated from your login" readonly />
                                        <div class="form-text">
                                            <i class="bi bi-check-circle-fill text-success"></i> 
                                            Auto-populated from your authenticated session
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label for="connectionName" class="form-label">Connection Name</label>
                                        <InputText id="connectionName" class="form-control" @bind-Value="_configuration.ConnectionName" placeholder="Enter a name for your connector" />
                                        <ValidationMessage For="@(() => _configuration.ConnectionName)" />
                                        <div class="form-text">
                                            This will be the display name for your External Connection (3-128 characters). Must start and end with alphanumeric characters.
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label for="connectionDescription" class="form-label">Connection Description</label>
                                        <InputTextArea id="connectionDescription" class="form-control" rows="3" @bind-Value="_configuration.ConnectionDescription" placeholder="Describe what data this connector will index" />
                                        <ValidationMessage For="@(() => _configuration.ConnectionDescription)" />
                                        <div class="form-text">
                                            Provide a clear description of the data source and what content it represents (10-500 characters)
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label for="jsonSample" class="form-label">JSON Sample Data</label>
                                        <InputTextArea id="jsonSample" class="form-control" rows="10" @bind-Value="_configuration.JsonSample" placeholder="Enter sample JSON data for schema creation" />
                                        <ValidationMessage For="@(() => _configuration.JsonSample)" />
                                        <div class="form-text">Provide a sample JSON object that represents the data structure you want to index</div>
                                        
                                        <div class="mt-2">
                                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="LoadSampleJson">
                                                Load Sample JSON
                                            </button>
                                        </div>
                                    </div>

                                    <div class="alert alert-info" style="display: none;">
                                        <h6><i class="bi bi-info-circle"></i> Choose Your Setup Method:</h6>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <strong>🔵 App Registration Method:</strong>
                                                <ul class="small mb-0">
                                                    <li>Creates a dedicated app registration</li>
                                                    <li>Uses application permissions</li>
                                                    <li>Requires manual admin consent</li>
                                                    <li>More secure for production</li>
                                                </ul>
                                            </div>
                                            <div class="col-md-6">
                                                <strong>🟢 Quick Setup Method:</strong>
                                                <ul class="small mb-0">
                                                    <li>Uses existing OAuth app permissions</li>
                                                    <li>Uses delegated permissions</li>
                                                    <li>May work without additional consent</li>
                                                    <li>Faster for testing/development</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary" disabled="@_isProcessing">
                                            @if (_isProcessing)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <text> Processing...</text>
                                            }
                                            else
                                            {
                                                <text>Create App Registration & External Connection</text>
                                            }
                                        </button>
                                        
                                        @* Hidden Quick Setup button - keeping functionality *@
                                        <button type="button" class="btn btn-success" @onclick="HandleSimplifiedConfiguration" disabled="@_isProcessing" style="display: none;">
                                            @if (_isProcessing)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <text> Processing...</text>
                                            }
                                            else
                                            {
                                                <i class="bi bi-lightning-charge"></i>
                                                <text>Quick Setup (Use OAuth App)</text>
                                            }
                                        </button>
                                        
                                        <a href="MicrosoftIdentity/Account/SignOut" class="btn btn-outline-secondary">
                                            Sign Out
                                        </a>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }

                    @if (_currentStep == SetupStep.AppRegistrationCreated)
                    {
                        <div class="card">
                            <div class="card-header">
                                <h3>Step 2: App Registration Created</h3>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-success">
                                    <strong>✅ App Registration Created Successfully!</strong><br />
                                    Application ID: <code>@(_appRegistrationResult?.ApplicationId ?? "Loading...")</code>
                                </div>
                                
                                <div class="alert alert-info">
                                    <strong>⏳ Waiting for Credential Propagation</strong><br />
                                    Azure AD needs time to propagate the new credentials. This prevents authentication errors.<br />
                                    <small class="text-muted">Waiting 30 seconds before creating the external connection...</small>
                                </div>
                                
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Waiting for credential propagation...</span>
                                    </div>
                                </div>
                                
                                <div class="mt-3 text-center">
                                    <small class="text-muted">
                                        This delay helps prevent the "AADSTS7000215: Invalid client secret" error<br />
                                        that commonly occurs with newly created app registrations.
                                    </small>
                                </div>
                            </div>
                        </div>
                    }

                    @if (_currentStep == SetupStep.AdminConsentRequired && _appRegistrationResult != null)
                    {
                        <div class="card">
                            <div class="card-header">
                                <h3>Step 3: Admin Consent Required</h3>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-warning">
                                    <h5><i class="bi bi-exclamation-triangle"></i> Administrator Consent Required</h5>
                                    <p>The app registration was created successfully, but it needs administrator consent for the External Connection permissions before it can create the connection and schema.</p>
                                </div>

                                <div class="alert alert-info">
                                    <h6><i class="bi bi-info-circle"></i> What happens next:</h6>
                                    <ol class="mb-0">
                                        <li>Click "Grant Admin Consent" below</li>
                                        <li>You'll be redirected to Microsoft's consent page</li>
                                        <li>Review and approve the permissions</li>
                                        <li>Return to this page to continue the setup</li>
                                    </ol>
                                </div>

                                <div class="mb-3">
                                    <h6>App Registration Details:</h6>
                                    <p><strong>Application ID:</strong> <code>@_appRegistrationResult.ApplicationId</code></p>
                                    <p><strong>Tenant ID:</strong> <code>@_appRegistrationResult.TenantId</code></p>
                                </div>

                                <div class="mb-3">
                                    <h6>Required Permissions:</h6>
                                    <ul>
                                        <li><code>ExternalConnection.ReadWrite.OwnedBy</code> - Create and manage external connections</li>
                                        <li><code>ExternalItem.ReadWrite.OwnedBy</code> - Create and manage external items</li>
                                    </ul>
                                </div>

                                <div class="d-flex gap-2">
                                    <button class="btn btn-primary btn-lg" @onclick="() => GrantAdminConsent(_appRegistrationResult.ApplicationId, _appRegistrationResult.TenantId)" disabled="@_isProcessing">
                                        @if (_isProcessing)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <text> Granting Consent...</text>
                                        }
                                        else
                                        {
                                            <i class="bi bi-shield-check"></i>
                                            <text> Grant Admin Consent</text>
                                        }
                                    </button>
                                    
                                    <button class="btn btn-success" @onclick="ContinueAfterConsent" disabled="@_isProcessing">
                                        <i class="bi bi-arrow-right"></i>
                                        Continue Setup
                                    </button>
                                </div>

                                <div class="mt-3">
                                    <small class="text-muted">
                                        <i class="bi bi-lightbulb"></i>
                                        <strong>Tip:</strong> After granting consent, click "Continue Setup" to proceed with creating the External Connection and schema.
                                    </small>
                                </div>
                            </div>
                        </div>
                    }

                    @if (_currentStep == SetupStep.Completed && _appRegistrationResult != null)
                    {
                        <div class="card">
                            <div class="card-header">
                                <h3>Step 3: Setup Complete!</h3>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-success">
                                    <strong>Congratulations!</strong> Your Microsoft Graph External Connection has been created successfully.
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <h5>App Registration Details</h5>
                                        <div class="mb-3">
                                            <label class="form-label">Application (Client) ID</label>
                                            <div class="input-group">
                                                <input type="text" class="form-control" value="@_appRegistrationResult.ApplicationId" readonly />
                                                <button class="btn btn-outline-secondary" type="button" @onclick="() => CopyToClipboard(_appRegistrationResult.ApplicationId)">
                                                    Copy
                                                </button>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Client Secret</label>
                                            <div class="input-group">
                                                <input type="@(_showSecret ? "text" : "password")" class="form-control" value="@_appRegistrationResult.ClientSecret" readonly />
                                                <button class="btn btn-outline-secondary" type="button" @onclick="() => _showSecret = !_showSecret">
                                                    @(_showSecret ? "Hide" : "Show")
                                                </button>
                                                <button class="btn btn-outline-secondary" type="button" @onclick="() => CopyToClipboard(_appRegistrationResult.ClientSecret)">
                                                    Copy
                                                </button>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Tenant ID</label>
                                            <div class="input-group">
                                                <input type="text" class="form-control" value="@_appRegistrationResult.TenantId" readonly />
                                                <button class="btn btn-outline-secondary" type="button" @onclick="() => CopyToClipboard(_appRegistrationResult.TenantId)">
                                                    Copy
                                                </button>
                                            </div>
                                        </div>

                                        <div class="alert alert-info">
                                            <h6><i class="bi bi-exclamation-triangle"></i> Admin Consent Required</h6>
                                            <p class="mb-2">To use this app registration, an administrator needs to grant consent to the required permissions.</p>
                                            <button class="btn btn-primary btn-sm" @onclick="() => OpenAdminConsentUrl(_appRegistrationResult.ApplicationId, _appRegistrationResult.TenantId)">
                                                <i class="bi bi-shield-check"></i> Grant Admin Consent
                                            </button>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <h5>Connection Details</h5>
                                        @if (_schemaResult != null)
                                        {
                                            <div class="mb-3">
                                                <label class="form-label">Connection ID</label>
                                                <div class="input-group">
                                                    <input type="text" class="form-control" value="@_schemaResult.ConnectionId" readonly />
                                                    <button class="btn btn-outline-secondary" type="button" @onclick="() => CopyToClipboard(_schemaResult.ConnectionId!)">
                                                        Copy
                                                    </button>
                                                </div>
                                            </div>
                                        }

                                        <div class="alert alert-warning">
                                            <strong>Important:</strong> Save these credentials securely. The client secret cannot be retrieved again.
                                        </div>
                                    </div>
                                </div>

                                <div class="mt-4 d-flex gap-2">
                                    <button class="btn btn-primary" @onclick="StartOver">Create Another Connection</button>
                                    <a href="MicrosoftIdentity/Account/SignOut" class="btn btn-outline-secondary">Sign Out</a>
                                </div>
                            </div>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
            }

            @* Azure CLI Configuration Section - shown regardless of authentication status *@
            @if (_useAzureCli && _currentStep == SetupStep.Configuration)
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h3>Step 1: Configuration (Azure CLI)</h3>
                        <small class="text-muted">Using Azure CLI authentication</small>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@_configuration" OnValidSubmit="@HandleConfigurationSubmit" Context="editContext">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            @if (!string.IsNullOrEmpty(_errorMessage))
                            {
                                <div class="alert alert-danger">@_errorMessage</div>
                            }

                            @if (!string.IsNullOrEmpty(_successMessage))
                            {
                                <div class="alert alert-success">@_successMessage</div>
                            }

                            <div class="mb-3">
                                <label for="tenantId" class="form-label">Tenant ID</label>
                                <InputText id="tenantId" class="form-control" @bind-Value="_configuration.TenantId" placeholder="Enter your Azure AD tenant ID" />
                                <div class="form-text">
                                    Enter the tenant ID where you want to create the app registration
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="jsonSample" class="form-label">JSON Sample Data</label>
                                <InputTextArea id="jsonSample" class="form-control" rows="10" @bind-Value="_configuration.JsonSample" placeholder="Enter sample JSON data for schema creation" />
                                <div class="form-text">Provide a sample JSON object that represents the data structure you want to index</div>
                                
                                <div class="mt-2">
                                    <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="LoadSampleJson">
                                        Load Sample JSON
                                    </button>
                                </div>
                            </div>

                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@_isProcessing">
                                    @if (_isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <text> Processing...</text>
                                    }
                                    else
                                    {
                                        <text>Create App Registration & Schema</text>
                                    }
                                </button>
                                <button type="button" class="btn btn-outline-secondary" @onclick="() => _useAzureCli = false">
                                    Back to Authentication
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>

    @* @if (_showWebTerminal)
    {
        <div class="row mt-4">
            <div class="col-12">
                <WebTerminal SessionId="@_terminalSessionId" OnClose="CloseWebTerminal" />
            </div>
        </div>
    } *@
</div>

@code {
    private TenantConfigurationModel _configuration = new();
    private AppRegistrationResult? _appRegistrationResult;
    private SchemaCreationResult? _schemaResult;
    private bool _isProcessing = false;
    private bool _isBootstrapping = false;
    private bool _showSecret = false;
    private bool _useAzureCli = false;
    private bool _autoLoginAttempted = false;
    private bool _showWebTerminal = false;
    private string _terminalSessionId = Guid.NewGuid().ToString();
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private string _statusMessage = string.Empty;
    private SetupStep _currentStep = SetupStep.Configuration;
    private bool _forceShowUI = false; // Force show UI during processing to prevent disappearing

    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated ?? false)
            {
                // Extract tenant ID from the authenticated user's claims
                var tenantIdClaim = authState.User.FindFirst("tid") ?? authState.User.FindFirst("http://schemas.microsoft.com/identity/claims/tenantid");
                if (tenantIdClaim != null)
                {
                    _configuration.TenantId = tenantIdClaim.Value;
                    StateHasChanged();
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if auto-login failed (can only do this after render)
            try
            {
                var url = await JSRuntime.InvokeAsync<string>("eval", "window.location.href");
                if (url.Contains("autoLoginFailed=true"))
                {
                    if (url.Contains("reason=placeholder"))
                    {
                        _errorMessage = "SSO is not available yet: This application is configured for creating app registrations. Once you complete the setup process, SSO will be available for future sessions. Please use 'Sign in with Microsoft' to begin.";
                    }
                    else if (url.Contains("reason=configuration"))
                    {
                        _errorMessage = "Auto sign-in is not available: This application needs to be configured with a valid Azure AD app registration first. Please use 'Sign in with Microsoft' for initial setup.";
                    }
                    else
                    {
                        _errorMessage = "Auto sign-in failed. Please sign in manually or try again.";
                    }
                    StateHasChanged();
                }

                // Attempt automatic silent authentication if not already authenticated
                if (AuthenticationStateTask != null)
                {
                    var authState = await AuthenticationStateTask;
                    if (!(authState.User.Identity?.IsAuthenticated ?? false) && !_autoLoginAttempted)
                    {
                        _autoLoginAttempted = true;
                        await TryAutoLogin();
                    }
                }
            }
            catch
            {
                // Ignore JavaScript interop errors during auto-login attempts
            }
        }
    }

    private async Task TryAutoLogin()
    {
        try
        {
            // Check if we're already authenticated in this app
            if (AuthenticationStateTask != null)
            {
                var authState = await AuthenticationStateTask;
                if (authState.User.Identity?.IsAuthenticated == true)
                {
                    // Already authenticated - just refresh the page to show authenticated content
                    StateHasChanged();
                    return;
                }
            }

            // Check for Microsoft authentication cookies (from Office 365, Azure Portal, etc.)
            var hasMicrosoftSession = await JSRuntime.InvokeAsync<bool>("eval", @"
                document.cookie.indexOf('ESTSAUTH') !== -1 || 
                document.cookie.indexOf('ESTSAUTHPERSISTENT') !== -1 || 
                document.cookie.indexOf('.AspNetCore.') !== -1 ||
                document.cookie.indexOf('SignInStateCookie') !== -1
            ");
            
            if (hasMicrosoftSession)
            {
                // Attempt silent authentication to leverage existing Microsoft session
                await JSRuntime.InvokeVoidAsync("window.location.assign", "/auto-login");
            }
        }
        catch
        {
            // Silent failure - don't show error for auto-login attempts
        }
    }

    private async Task ManualAutoLogin()
    {
        try
        {
            _isProcessing = true;
            _errorMessage = string.Empty;
            StateHasChanged();

            // First check if we're already authenticated
            if (AuthenticationStateTask != null)
            {
                var authState = await AuthenticationStateTask;
                if (authState.User.Identity?.IsAuthenticated == true)
                {
                    _successMessage = "You are already signed in! Refreshing the page...";
                    StateHasChanged();
                    await Task.Delay(1000);
                    await JSRuntime.InvokeVoidAsync("window.location.reload");
                    return;
                }
            }

            // Check for any Microsoft authentication session (Office 365, Azure Portal, etc.)
            var hasMicrosoftSession = await JSRuntime.InvokeAsync<bool>("eval", @"
                document.cookie.indexOf('ESTSAUTH') !== -1 || 
                document.cookie.indexOf('ESTSAUTHPERSISTENT') !== -1 || 
                document.cookie.indexOf('.AspNetCore.') !== -1 ||
                document.cookie.indexOf('SignInStateCookie') !== -1 ||
                localStorage.getItem('msal.idtoken') !== null ||
                sessionStorage.getItem('msal.idtoken') !== null
            ");
            
            if (!hasMicrosoftSession)
            {
                _errorMessage = "No Microsoft authentication session detected. Please sign in to portal.office.com or use 'Sign in with Microsoft' below.";
                _isProcessing = false;
                StateHasChanged();
                return;
            }

            _successMessage = "Microsoft session detected. Attempting auto sign-in...";
            StateHasChanged();
            await Task.Delay(500); // Brief delay to show the message

            // Attempt silent authentication using existing Microsoft session
            await JSRuntime.InvokeVoidAsync("window.location.assign", "/auto-login");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Auto sign-in failed: {ex.Message}. Please use 'Sign in with Microsoft' instead.";
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task PerformBootstrap()
    {
        try
        {
            _isBootstrapping = true;
            _isProcessing = true;
            _errorMessage = string.Empty;
            StateHasChanged();

            // Check bootstrap status first
            var statusResponse = await JSRuntime.InvokeAsync<object>("fetch", "/api/bootstrap/status");
            var statusResult = await JSRuntime.InvokeAsync<string>("response => response.json()", statusResponse);
            
            // Parse the status result (simplified - in production you'd use proper JSON parsing)
            if (statusResult.Contains("\"canBootstrap\":false"))
            {
                if (statusResult.Contains("\"azureCliInstalled\":false"))
                {
                    _errorMessage = "Azure CLI is not installed. Please install Azure CLI first: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli";
                }
                else if (statusResult.Contains("\"azureCliLoggedIn\":false"))
                {
                    _errorMessage = "Please log in to Azure CLI first by running: az login";
                }
                else
                {
                    _errorMessage = "Bootstrap requirements not met. Please ensure Azure CLI is installed and you're logged in.";
                }
                return;
            }

            _successMessage = "Azure CLI detected! Creating app registration...";
            StateHasChanged();
            await Task.Delay(500);

            // Perform the bootstrap
            var response = await JSRuntime.InvokeAsync<object>("fetch", "/api/bootstrap/start", new
            {
                method = "POST",
                headers = new { ContentType = "application/json" }
            });
            
            var result = await JSRuntime.InvokeAsync<string>("response => response.json()", response);
            
            if (result.Contains("\"success\":true"))
            {
                _successMessage = "🎉 Bootstrap completed successfully! The application has been configured with a new app registration. Please restart the application to enable SSO.";
                _errorMessage = string.Empty;
                
                // Show restart instructions
                await Task.Delay(2000);
                _successMessage += "\n\n⚠️ IMPORTANT: Please restart the application (Ctrl+C and run 'dotnet run' again) to load the new configuration.";
            }
            else
            {
                _errorMessage = "Bootstrap failed. Please try manual setup instead.";
                _successMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Bootstrap error: {ex.Message}. Please try manual setup instead.";
            _successMessage = string.Empty;
        }
        finally
        {
            _isBootstrapping = false;
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private void OpenWebTerminal()
    {
        _showWebTerminal = true;
        _terminalSessionId = Guid.NewGuid().ToString();
        StateHasChanged();
    }

    private void CloseWebTerminal()
    {
        _showWebTerminal = false;
        StateHasChanged();
    }

    private async Task CheckAzureCli()
    {
        try
        {
            _isProcessing = true;
            _errorMessage = string.Empty;
            StateHasChanged();

            var isLoggedIn = await GraphService.IsAzureCliLoggedInAsync();
            if (isLoggedIn)
            {
                _useAzureCli = true;
                _currentStep = SetupStep.Configuration;
                _successMessage = "Azure CLI authentication detected. You can now proceed with app registration creation.";
            }
            else
            {
                _errorMessage = "Azure CLI authentication not found. Please run 'az login' in your terminal first, then try again.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error checking Azure CLI authentication: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleConfigurationSubmit()
    {
        try
        {
            _errorMessage = string.Empty;
            
            // Validate required fields
            if (string.IsNullOrWhiteSpace(_configuration.TenantId))
            {
                _errorMessage = "Tenant ID is missing. Please refresh the page and sign in again.";
                StateHasChanged();
                return;
            }

            if (string.IsNullOrWhiteSpace(_configuration.JsonSample))
            {
                _errorMessage = "Please provide JSON sample data for schema creation.";
                StateHasChanged();
                return;
            }

            // Validate JSON format
            try
            {
                System.Text.Json.JsonDocument.Parse(_configuration.JsonSample);
            }
            catch (Exception jsonEx)
            {
                _errorMessage = $"Invalid JSON format: {jsonEx.Message}";
                StateHasChanged();
                return;
            }

            // Check authentication
            if (AuthenticationStateTask == null)
            {
                _errorMessage = "Authentication not available. Please refresh the page and try again.";
                StateHasChanged();
                return;
            }

            _isProcessing = true;
            StateHasChanged();

            var authState = await AuthenticationStateTask;
            if (!authState.User.Identity?.IsAuthenticated ?? true)
            {
                _errorMessage = "You must be authenticated to create app registrations.";
                _isProcessing = false;
                StateHasChanged();
                return;
            }

            var user = authState.User;

            // Step 1: Create App Registration
            if (_useAzureCli)
            {
                _appRegistrationResult = await AppRegistrationService.CreateAppRegistrationWithAzureCliAsync(_configuration.TenantId);
            }
            else
            {
                _appRegistrationResult = await AppRegistrationService.CreateAppRegistrationAsync(user, _configuration.TenantId);
            }

            if (!_appRegistrationResult.Success)
            {
                _errorMessage = _appRegistrationResult.ErrorMessage ?? "Failed to create app registration.";
                _isProcessing = false;
                StateHasChanged();
                return;
            }

            _currentStep = SetupStep.AppRegistrationCreated;
            StateHasChanged();

            // Wait for app registration and client secret to propagate
            // This helps prevent AADSTS7000215 errors due to timing issues
            await Task.Delay(30000); // Wait 30 seconds for credential propagation

            // Step 2: Create Schema and Connection
            _forceShowUI = true; // Force UI to stay visible during processing
            _schemaResult = await SchemaService.CreateSchemaAndConnectionAsync(
                _configuration.TenantId,
                _appRegistrationResult.ApplicationId,
                _appRegistrationResult.ClientSecret,
                _configuration.JsonSample,
                _configuration.ConnectionName,
                _configuration.ConnectionDescription);

            if (!_schemaResult.Success)
            {
                // Check if this is an admin consent issue
                if (_schemaResult.ErrorMessage?.Contains("admin consent") == true ||
                    _schemaResult.ErrorMessage?.Contains("Insufficient privileges") == true ||
                    _schemaResult.ErrorMessage?.Contains("Current authenticated context is not valid") == true)
                {
                    // Move to admin consent step instead of failing
                    _currentStep = SetupStep.AdminConsentRequired;
                    _isProcessing = false;
                    StateHasChanged();
                    return;
                }
                
                _errorMessage = _schemaResult.ErrorMessage ?? "Failed to create schema and connection.";
                _isProcessing = false;
                StateHasChanged();
                return;
            }

            _currentStep = SetupStep.Completed;
            _successMessage = "Setup completed successfully! Your external connection is ready to use.";
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleSimplifiedConfiguration()
    {
        try
        {
            _errorMessage = "";
            _successMessage = "";
            
            // Validate required fields
            if (string.IsNullOrWhiteSpace(_configuration.TenantId))
            {
                _errorMessage = "Tenant ID is missing. Please refresh the page and sign in again.";
                StateHasChanged();
                return;
            }

            if (string.IsNullOrWhiteSpace(_configuration.JsonSample))
            {
                _errorMessage = "Please provide JSON sample data for schema creation.";
                StateHasChanged();
                return;
            }

            // Validate JSON format
            try
            {
                System.Text.Json.JsonDocument.Parse(_configuration.JsonSample);
            }
            catch (Exception jsonEx)
            {
                _errorMessage = $"Invalid JSON format: {jsonEx.Message}";
                StateHasChanged();
                return;
            }

            // Check authentication
            if (AuthenticationStateTask == null)
            {
                _errorMessage = "Authentication not available. Please refresh the page and try again.";
                StateHasChanged();
                return;
            }

            _isProcessing = true;
            StateHasChanged();

            var authState = await AuthenticationStateTask;
            if (!authState.User.Identity?.IsAuthenticated ?? true)
            {
                _errorMessage = "You must be authenticated to create external connections.";
                _isProcessing = false;
                StateHasChanged();
                return;
            }

            var user = authState.User;

            // Skip app registration creation - use existing OAuth app's delegated permissions
            _forceShowUI = true;
            _schemaResult = await SchemaService.CreateSchemaAndConnectionWithDelegatedPermissionsAsync(
                user,
                _configuration.JsonSample,
                _configuration.ConnectionName,
                _configuration.ConnectionDescription);

            if (!_schemaResult.Success)
            {
                _errorMessage = _schemaResult.ErrorMessage ?? "Failed to create schema and connection.";
                _isProcessing = false;
                StateHasChanged();
                return;
            }

            _currentStep = SetupStep.Completed;
            _successMessage = $"Setup completed successfully! External connection '{_configuration.ConnectionName}' is ready to use.";
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private void LoadSampleJson()
    {
        _configuration.JsonSample = @"{
  ""title"": ""Sample Product"",
  ""description"": ""This is a sample product for demonstration"",
  ""price"": 29.99,
  ""category"": ""Electronics"",
  ""sku"": ""PROD-001"",
  ""inStock"": true,
  ""tags"": [""sample"", ""demo"", ""product""],
  ""manufacturer"": {
    ""name"": ""Sample Corp"",
    ""country"": ""USA""
  },
  ""lastUpdated"": ""2024-01-15T10:30:00Z""
}";
        StateHasChanged();
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            // You could show a toast notification here
        }
        catch
        {
            // Fallback for older browsers
            await JSRuntime.InvokeVoidAsync("prompt", "Copy this value:", text);
        }
    }

    private void TestButton()
    {
        _errorMessage = "Test button clicked! Component is working.";
        StateHasChanged();
    }

    private void StartOver()
    {
        _configuration = new TenantConfigurationModel();
        _appRegistrationResult = null;
        _schemaResult = null;
        _currentStep = SetupStep.Configuration;
        _errorMessage = string.Empty;
        _successMessage = string.Empty;
        _showSecret = false;
        StateHasChanged();
    }

    private async Task OpenAdminConsentUrl(string clientId, string tenantId)
    {
        try
        {
            var consentUrl = AppRegistrationService.GenerateAdminConsentUrl(clientId, tenantId);
            await JSRuntime.InvokeVoidAsync("window.open", consentUrl, "_blank");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to open admin consent URL: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task RetrySchemaCreation()
    {
        try
        {
            if (_appRegistrationResult == null)
            {
                _errorMessage = "No app registration found. Please create the app registration first.";
                StateHasChanged();
                return;
            }

            _isProcessing = true;
            _errorMessage = string.Empty;
            _currentStep = SetupStep.AppRegistrationCreated;
            StateHasChanged();

            // Retry the schema creation
            _schemaResult = await SchemaService.CreateSchemaAndConnectionAsync(
                _configuration.TenantId,
                _appRegistrationResult.ApplicationId,
                _appRegistrationResult.ClientSecret,
                _configuration.JsonSample,
                _configuration.ConnectionName,
                _configuration.ConnectionDescription);

            if (!_schemaResult.Success)
            {
                _errorMessage = _schemaResult.ErrorMessage ?? "Failed to create schema and connection.";
                _currentStep = SetupStep.Configuration;
            }
            else
            {
                _currentStep = SetupStep.Completed;
                _successMessage = "Setup completed successfully! Your external connection is ready to use.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred during retry: {ex.Message}";
            _currentStep = SetupStep.Configuration;
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private enum SetupStep
    {
        Configuration,
        AppRegistrationCreated,
        AdminConsentRequired,
        Completed
    }

    private async Task ContinueAfterConsent()
    {
        if (_appRegistrationResult == null)
        {
            _errorMessage = "App registration information is missing.";
            return;
        }

        try
        {
            _isProcessing = true;
            StateHasChanged();

            // Step 3: Create Schema and Connection (continuing from where we left off)
            _schemaResult = await SchemaService.CreateSchemaAndConnectionAsync(
                _configuration.TenantId,
                _appRegistrationResult.ApplicationId,
                _appRegistrationResult.ClientSecret,
                _configuration.JsonSample,
                _configuration.ConnectionName,
                _configuration.ConnectionDescription);

            if (!_schemaResult.Success)
            {
                _errorMessage = _schemaResult.ErrorMessage ?? "Failed to create schema and connection after admin consent.";
                _isProcessing = false;
                StateHasChanged();
                return;
            }

            _currentStep = SetupStep.Completed;
            _successMessage = "Setup completed successfully! Your external connection is ready to use.";
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred after admin consent: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task GrantAdminConsent(string clientId, string tenantId)
    {
        try
        {
            var consentUrl = AppRegistrationService.GenerateAdminConsentUrl(clientId, tenantId, "http://localhost:5000/");
            await JSRuntime.InvokeVoidAsync("window.open", consentUrl, "_blank");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error opening admin consent URL: {ex.Message}";
            StateHasChanged();
        }
    }

    private string GetProgressWidth()
    {
        return _currentStep switch
        {
            SetupStep.Configuration => "25%",
            SetupStep.AppRegistrationCreated => "50%",
            SetupStep.AdminConsentRequired => "75%",
            SetupStep.Completed => "100%",
            _ => "25%"
        };
    }

    private int GetProgressValue()
    {
        return _currentStep switch
        {
            SetupStep.Configuration => 25,
            SetupStep.AppRegistrationCreated => 50,
            SetupStep.AdminConsentRequired => 75,
            SetupStep.Completed => 100,
            _ => 25
        };
    }
}
